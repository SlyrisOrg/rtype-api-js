"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var _http=require("http");var _http2=_interopRequireDefault(_http);var _path=require("path");var _path2=_interopRequireDefault(_path);var _jsonwebtoken=require("jsonwebtoken");var _jsonwebtoken2=_interopRequireDefault(_jsonwebtoken);var _bodyParser=require("body-parser");var _bodyParser2=_interopRequireDefault(_bodyParser);var _express=require("express");var _express2=_interopRequireDefault(_express);var _helmet=require("helmet");var _helmet2=_interopRequireDefault(_helmet);var _morgan=require("morgan");var _morgan2=_interopRequireDefault(_morgan);var _winston=require("winston");var _winston2=_interopRequireDefault(_winston);var _mongoose=require("mongoose");var _mongoose2=_interopRequireDefault(_mongoose);var _bcrypt=require("bcrypt");var _bcrypt2=_interopRequireDefault(_bcrypt);var _passport=require("passport");var _passport2=_interopRequireDefault(_passport);var _passportLocal=require("passport-local");var _passportLocal2=_interopRequireDefault(_passportLocal);var _dotenv=require("dotenv");var _dotenv2=_interopRequireDefault(_dotenv);var _expressValidator=require("express-validator");var _expressValidator2=_interopRequireDefault(_expressValidator);var _config=require("./modules/config");var _config2=_interopRequireDefault(_config);var _logger=require("./modules/logger");var _logger2=_interopRequireDefault(_logger);var _user=require("./modules/user");var _user2=_interopRequireDefault(_user);var _user3=require("./controllers/user");var _user4=_interopRequireDefault(_user3);var _user5=require("./models/user");var _user6=_interopRequireDefault(_user5);var _general=require("./configs/general.json");var _general2=_interopRequireDefault(_general);var _payload=require("./configs/payload.json");var _payload2=_interopRequireDefault(_payload);function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}const config=(0,_config2.default)({dotenv:_dotenv2.default},{general:_general2.default,payload:_payload2.default});const logger=(0,_logger2.default)({winston:_winston2.default},config);_mongoose2.default.Promise=Promise;_mongoose2.default.connect(config.database.mongo.uri,{useMongoClient:!0});const User=(0,_user6.default)({mongoose:_mongoose2.default,bcrypt:_bcrypt2.default});(0,_user2.default)({passport:_passport2.default,passportLocal:_passportLocal2.default},{User},config);const app=(0,_express2.default)();app.use((0,_helmet2.default)());app.use(async(req,res,next)=>{const signature=req.headers["x-hub-signature"];if(signature){const elements=signature.split("=");const password=elements[1]||signature;const isMatch=await _bcrypt2.default.compare(password,config.server.signature);if(isMatch){next();return}}res.json({success:!1,payload:config.payload.system.unvalidSignature})});app.use(_passport2.default.initialize());app.use(_bodyParser2.default.urlencoded({extended:!0,defer:!0}));app.use(_bodyParser2.default.json({type:"*/*"}));app.use((error,req,res,next)=>{if(error instanceof SyntaxError){res.json({success:!1,payload:config.payload.system.badRequest,content:{}});return}next()});app.use((0,_morgan2.default)("combined",{stream:{write:message=>logger.info(message)}}));if(!config.server.production){app.use((req,res,next)=>{logger.debug(req.body);next()});app.use((req,res,next)=>{const chunks=[];const oldWrite=res.write;res.write=function write(chunk,...args){chunks.push(chunk);oldWrite.apply(res,[chunk,args])};const oldEnd=res.end;res.end=function end(chunk,...args){if(chunk){chunks.push(chunk)}const body=Buffer.concat(chunks).toString("utf8");logger.debug(JSON.parse(body));oldEnd.apply(res,[chunk,args])};next()})}app.use((0,_expressValidator2.default)());app.use("/",_express2.default.static(_path2.default.resolve(process.cwd(),"public")));app.use("/api/user",(0,_user4.default)({passport:_passport2.default,logger,jwt:_jsonwebtoken2.default},{User},config)(_express2.default.Router()));app.use("*",(req,res)=>{res.json({success:!1,payload:config.payload.system.notFound})});const onStartEvent=()=>logger.info(`Application launched on ${config.server.env}`);const onErrorEvent=err=>{if(err.syscall!=="listen"){throw new Error(err)}const bind=typeof config.server.port==="string"?`Pipe ${config.server.port}`:`Port ${config.server.port}`;switch(err.code){case"EACCES":throw new Error(`${bind} port requires elevated privileges`);case"EADDRINUSE":throw new Error(`${bind} port is already in use`);default:throw err;}};const onListenEvent=server=>()=>{const addr=server.address();const bind=typeof addr==="string"?`pipe ${addr}`:`port ${addr.port}`;logger.info(`Application listening on ${bind}`)};const server=_http2.default.createServer(app);server.listen(config.server.port,onStartEvent);server.on("err",onErrorEvent);server.on("listening",onListenEvent(server));const cleanExit=()=>{logger.info("Application exit");process.exit(0)};process.on("SIGINT",cleanExit);process.on("SIGTERM",cleanExit);process.on("uncaughtException",err=>{logger.error(`Caught exception: ${err}`);process.exit(1)});process.on("unhandledRejection",(reason,p)=>{logger.error(`Unhandled Rejection at: ${p} and reason: ${reason}`);process.exit(1)});exports.default=app;